{
	"name": "golden_transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "silver_stations",
						"type": "DatasetReference"
					},
					"name": "stations"
				},
				{
					"dataset": {
						"referenceName": "silver_payments",
						"type": "DatasetReference"
					},
					"name": "payments"
				},
				{
					"dataset": {
						"referenceName": "silver_riders",
						"type": "DatasetReference"
					},
					"name": "riders"
				},
				{
					"dataset": {
						"referenceName": "silver_trips",
						"type": "DatasetReference"
					},
					"name": "trips"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dim_payment",
						"type": "DatasetReference"
					},
					"name": "paymentsDimension"
				},
				{
					"dataset": {
						"referenceName": "dim_stations",
						"type": "DatasetReference"
					},
					"name": "stationsDimension"
				},
				{
					"dataset": {
						"referenceName": "dim_rider",
						"type": "DatasetReference"
					},
					"name": "ridersDimension"
				},
				{
					"dataset": {
						"referenceName": "dim_rideable",
						"type": "DatasetReference"
					},
					"name": "rideableDimension"
				},
				{
					"dataset": {
						"referenceName": "dim_trip_date",
						"type": "DatasetReference"
					},
					"name": "tripDateDimension"
				},
				{
					"dataset": {
						"referenceName": "fact_trip",
						"type": "DatasetReference"
					},
					"name": "factTrip"
				},
				{
					"dataset": {
						"referenceName": "fact_transaction",
						"type": "DatasetReference"
					},
					"name": "transactionFact"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "droppingRiderID"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "keepIDCols"
				},
				{
					"name": "selectIDcols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          station_id as string,",
				"          name as string,",
				"          latitude as float,",
				"          longitude as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> stations",
				"source(output(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0),",
				"          rider_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> payments",
				"source(output(",
				"          rider_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          address as string,",
				"          birthday as date,",
				"          account_start_date as date,",
				"          account_end_date as date,",
				"          is_member as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> riders",
				"source(output(",
				"          trip_id as string,",
				"          rideable_type as string,",
				"          started_at as timestamp,",
				"          ended_at as timestamp,",
				"          start_station_id as string,",
				"          end_station_id as string,",
				"          rider_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> trips",
				"stations select(mapColumn(",
				"          station_id,",
				"          name,",
				"          latitude,",
				"          longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"payments select(mapColumn(",
				"          payment_id,",
				"          date,",
				"          amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> droppingRiderID",
				"trips select(mapColumn(",
				"          rideable_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 aggregate(groupBy(rideable_type),",
				"     rideable_type_id = countDistinct(rideable_type)) ~> aggregate1",
				"aggregate1 keyGenerate(output(rideable_type_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"trips select(mapColumn(",
				"          trip_id,",
				"          started_at,",
				"          ended_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(duration_secs = minus(ended_at, started_at) / 1000) ~> derivedColumn1",
				"surrogateKey1, trips join(aggregate1@rideable_type == trips@rideable_type,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          rideable_type_id,",
				"          trip_id,",
				"          start_station_id,",
				"          end_station_id,",
				"          rider_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> keepIDCols",
				"payments select(mapColumn(",
				"          payment_id,",
				"          rider_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectIDcols",
				"droppingRiderID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> paymentsDimension",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> stationsDimension",
				"riders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ridersDimension",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rideableDimension",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> tripDateDimension",
				"keepIDCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> factTrip",
				"selectIDcols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> transactionFact"
			]
		}
	}
}