{
	"name": "gold_transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "silver_payments",
						"type": "DatasetReference"
					},
					"name": "payments"
				},
				{
					"dataset": {
						"referenceName": "silver_riders",
						"type": "DatasetReference"
					},
					"name": "riders"
				},
				{
					"dataset": {
						"referenceName": "silver_stations",
						"type": "DatasetReference"
					},
					"name": "stations"
				},
				{
					"dataset": {
						"referenceName": "silver_trips",
						"type": "DatasetReference"
					},
					"name": "trips"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "paymentTransformation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          station_id as string,",
				"          name as string,",
				"          latitude as float,",
				"          longitude as float,",
				"          {1} as integer,",
				"          {2} as date,",
				"          {3} as decimal(10,0),",
				"          {4} as integer,",
				"          trip_id as string,",
				"          rideable_type as string,",
				"          started_at as timestamp,",
				"          ended_at as timestamp,",
				"          start_station_id as string,",
				"          end_station_id as string,",
				"          rider_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          address as string,",
				"          birthday as date,",
				"          account_start_date as date,",
				"          account_end_date as date,",
				"          is_member as boolean,",
				"          payment_id as integer,",
				"          date as date,",
				"          amount as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> payments",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> riders",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> stations",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> trips",
				"payments select(mapColumn(",
				"          each(match(payment_id),",
				"               payment_id = $$),",
				"          each(match(ERROR_FUNCTION('')),",
				"               ERROR_FUNCTION('') = $$),",
				"          each(match(ERROR_FUNCTION('')),",
				"               ERROR_FUNCTION('') = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> paymentTransformation"
			]
		}
	}
}