{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "aden-star-schema"
		},
		"adenAzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adenAzureBlobStorage1'"
		},
		"adenGitHub1_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'adenGitHub1'"
		},
		"adenGitHub1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "Adenation"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/adenAzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "data.csv"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('adenAzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adenGitHub1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('adenGitHub1_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('adenGitHub1_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDRCRTBGRUIwLTQ2NDMtNEY4Ni05RkEwLUJCNDZCOEFDMkQyQl9kZWJhYmY3ZS01ZTE1LTQ4ZGQtYmYyOS05NzFhZTVlYzdjMWYiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "trips.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "csvs",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*.parquet",
						"folderPath": "tables",
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/payments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "payments.csv",
						"folderPath": "csvs",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_payments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "payments.parquet",
						"folderPath": "tables",
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					},
					{
						"name": "Prop_4",
						"type": "UTF8"
					},
					{
						"name": "Prop_5",
						"type": "UTF8"
					},
					{
						"name": "Prop_6",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/riders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "riders.csv",
						"folderPath": "csvs",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_riders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "riders.parquet",
						"folderPath": "tables",
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trips')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trips.csv",
						"folderPath": "csvs",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_trips')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trips.parquet",
						"folderPath": "tables",
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stations.csv",
						"folderPath": "csvs",
						"container": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_stations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stations.parquet",
						"folderPath": "tables",
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_payments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "payments",
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_riders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "riders",
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_stations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "stations",
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_trips')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "trips",
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_payment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dim_payment",
						"container": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_stations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adenAzureBlobStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"fileName": "data.csv"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dim_station",
						"container": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adenAzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Cast all columns from bronze tables to silver tables",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_stations",
								"type": "DatasetReference"
							},
							"name": "stations"
						},
						{
							"dataset": {
								"referenceName": "bronze_payments",
								"type": "DatasetReference"
							},
							"name": "payments"
						},
						{
							"dataset": {
								"referenceName": "bronze_riders",
								"type": "DatasetReference"
							},
							"name": "riders"
						},
						{
							"dataset": {
								"referenceName": "bronze_trips",
								"type": "DatasetReference"
							},
							"name": "trips"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_stations",
								"type": "DatasetReference"
							},
							"name": "sinkStations"
						},
						{
							"dataset": {
								"referenceName": "silver_payments",
								"type": "DatasetReference"
							},
							"name": "sinkPayments"
						},
						{
							"dataset": {
								"referenceName": "silver_riders",
								"type": "DatasetReference"
							},
							"name": "sinkRiders"
						},
						{
							"dataset": {
								"referenceName": "silver_trips",
								"type": "DatasetReference"
							},
							"name": "sinkTrips"
						}
					],
					"transformations": [
						{
							"name": "castStations"
						},
						{
							"name": "castPayments"
						},
						{
							"name": "castRiders"
						},
						{
							"name": "castTrips"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as string,",
						"          {4} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> stations",
						"source(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as string,",
						"          {4} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> payments",
						"source(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as string,",
						"          {4} as string,",
						"          {5} as string,",
						"          {6} as string,",
						"          {7} as string,",
						"          {8} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> riders",
						"source(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as string,",
						"          {4} as string,",
						"          {5} as string,",
						"          {6} as string,",
						"          {7} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> trips",
						"stations cast(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as float,",
						"          {4} as float",
						"     ),",
						"     errors: true) ~> castStations",
						"payments cast(output(",
						"          {1} as integer,",
						"          {2} as date 'yyyy-MM-dd',",
						"          {3} as decimal(10,0),",
						"          {4} as integer",
						"     ),",
						"     errors: true) ~> castPayments",
						"riders cast(output(",
						"          {1} as integer,",
						"          {2} as string,",
						"          {3} as string,",
						"          {4} as string,",
						"          {5} as date 'yyyy-MM-dd',",
						"          {6} as date 'yyyy-MM-dd',",
						"          {7} as date 'yyyy-MM-dd',",
						"          {8} as boolean",
						"     ),",
						"     errors: true) ~> castRiders",
						"trips cast(output(",
						"          {1} as string,",
						"          {2} as string,",
						"          {3} as timestamp 'dd/MM/yyyy hh:mm',",
						"          {4} as timestamp 'dd/MM/yyyy hh:mm',",
						"          {5} as string,",
						"          {6} as string,",
						"          {7} as integer",
						"     ),",
						"     errors: true) ~> castTrips",
						"castStations select(mapColumn(",
						"          station_id = {1},",
						"          name = {2},",
						"          latitude = {3},",
						"          longitude = {4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"castPayments select(mapColumn(",
						"          payment_id = {1},",
						"          date = {2},",
						"          amount = {3},",
						"          rider_id = {4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"castRiders select(mapColumn(",
						"          rider_id = {1},",
						"          first_name = {2},",
						"          last_name = {3},",
						"          address = {4},",
						"          birthday = {5},",
						"          account_start_date = {6},",
						"          account_end_date = {7},",
						"          is_member = {8}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"castTrips select(mapColumn(",
						"          trip_id = {1},",
						"          rideable_type = {2},",
						"          started_at = {3},",
						"          ended_at = {4},",
						"          start_station_id = {5},",
						"          end_station_id = {6},",
						"          rider_id = {7}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkStations",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkPayments",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkRiders",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkTrips"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_stations')]",
				"[concat(variables('factoryId'), '/datasets/bronze_payments')]",
				"[concat(variables('factoryId'), '/datasets/bronze_riders')]",
				"[concat(variables('factoryId'), '/datasets/bronze_trips')]",
				"[concat(variables('factoryId'), '/datasets/silver_stations')]",
				"[concat(variables('factoryId'), '/datasets/silver_payments')]",
				"[concat(variables('factoryId'), '/datasets/silver_riders')]",
				"[concat(variables('factoryId'), '/datasets/silver_trips')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/golden_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "silver_stations",
								"type": "DatasetReference"
							},
							"name": "stations"
						},
						{
							"dataset": {
								"referenceName": "silver_payments",
								"type": "DatasetReference"
							},
							"name": "payments"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_payment",
								"type": "DatasetReference"
							},
							"name": "paymentsDimension"
						},
						{
							"dataset": {
								"referenceName": "dim_stations",
								"type": "DatasetReference"
							},
							"name": "stationsDimension"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "droppingRiderID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          station_id as string,",
						"          name as string,",
						"          latitude as float,",
						"          longitude as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> stations",
						"source(output(",
						"          payment_id as integer,",
						"          date as date,",
						"          amount as decimal(10,0),",
						"          rider_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> payments",
						"stations select(mapColumn(",
						"          station_id,",
						"          name,",
						"          latitude,",
						"          longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"payments select(mapColumn(",
						"          payment_id,",
						"          date,",
						"          amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> droppingRiderID",
						"droppingRiderID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> paymentsDimension",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> stationsDimension"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/silver_stations')]",
				"[concat(variables('factoryId'), '/datasets/silver_payments')]",
				"[concat(variables('factoryId'), '/datasets/dim_payment')]",
				"[concat(variables('factoryId'), '/datasets/dim_stations')]"
			]
		}
	]
}